# -*- coding: utf-8 -*-
"""
Created on Fri Jul  9 09:48:11 2021

@author: 82108
"""

"""
No.11 [Largest product in a grid]

In the 20×20 grid below, four numbers along a diagonal line have been marked in red.

08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48

The product of these numbers is 26 × 63 × 78 × 14 = 1788696.

What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?
"""

grid_20_20 = """
08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48
"""


# Check
len(grid_20_20) # 1201

grid_20_20[0] # '\n'
grid_20_20[1]  # '0'


# Preprocessing
num_list = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
pre_list = []

for i in grid_20_20 :
    if i in num_list :
        pre_list.append(i)

join = ''.join(pre_list)

print(join)
len(join) # 800


# Conversion
join_list = []
j = 0

for i in range(2, 801, 2) :
    join_list.append(join[j:i])
    j += 2

print(join_list)
'''
['08', '02', '22', '97', '38', '15', '00', '40', '00', '75', '04', '05', '07', 
 '78', '52', '12', '50', '77', '91', '08', '49', '49', '99', '40', '17', '81', 
 '18', '57', '60', '87', '17', '40', '98', '43', '69', '48', '04', '56', '62', 
 '00', '81', '49', '31', '73', '55', '79', '14', '29', '93', '71', '40', '67', 
 '53', '88', '30', '03', '49', '13', '36', '65', '52', '70', '95', '23', '04', 
 '60', '11', '42', '69', '24', '68', '56', '01', '32', '56', '71', '37', '02', 
 '36', '91', '22', '31', '16', '71', '51', '67', '63', '89', '41', '92', '36', 
 '54', '22', '40', '40', '28', '66', '33', '13', '80', '24', '47', '32', '60', 
 '99', '03', '45', '02', '44', '75', '33', '53', '78', '36', '84', '20', '35', 
 '17', '12', '50', '32', '98', '81', '28', '64', '23', '67', '10', '26', '38', 
 '40', '67', '59', '54', '70', '66', '18', '38', '64', '70', '67', '26', '20', 
 '68', '02', '62', '12', '20', '95', '63', '94', '39', '63', '08', '40', '91', 
 '66', '49', '94', '21', '24', '55', '58', '05', '66', '73', '99', '26', '97', 
 '17', '78', '78', '96', '83', '14', '88', '34', '89', '63', '72', '21', '36', 
 '23', '09', '75', '00', '76', '44', '20', '45', '35', '14', '00', '61', '33', 
 '97', '34', '31', '33', '95', '78', '17', '53', '28', '22', '75', '31', '67', 
 '15', '94', '03', '80', '04', '62', '16', '14', '09', '53', '56', '92', '16', 
 '39', '05', '42', '96', '35', '31', '47', '55', '58', '88', '24', '00', '17', 
 '54', '24', '36', '29', '85', '57', '86', '56', '00', '48', '35', '71', '89', 
 '07', '05', '44', '44', '37', '44', '60', '21', '58', '51', '54', '17', '58', 
 '19', '80', '81', '68', '05', '94', '47', '69', '28', '73', '92', '13', '86', 
 '52', '17', '77', '04', '89', '55', '40', '04', '52', '08', '83', '97', '35', 
 '99', '16', '07', '97', '57', '32', '16', '26', '26', '79', '33', '27', '98', 
 '66', '88', '36', '68', '87', '57', '62', '20', '72', '03', '46', '33', '67', 
 '46', '55', '12', '32', '63', '93', '53', '69', '04', '42', '16', '73', '38', 
 '25', '39', '11', '24', '94', '72', '18', '08', '46', '29', '32', '40', '62', 
 '76', '36', '20', '69', '36', '41', '72', '30', '23', '88', '34', '62', '99', 
 '69', '82', '67', '59', '85', '74', '04', '36', '16', '20', '73', '35', '29', 
 '78', '31', '90', '01', '74', '31', '49', '71', '48', '86', '81', '16', '23', 
 '57', '05', '54', '01', '70', '54', '71', '83', '51', '54', '69', '16', '92', 
 '33', '48', '61', '43', '52', '01', '89', '19', '67', '48']
'''

len(join_list) # 400

j = 0 
nested_list = []

for i in range(20, 420, 20) :
    nested_list.append(join_list[j:i])
    j += 20

print(nested_list)
'''
[['08', '02', '22', '97', '38', '15', '00', '40', '00', '75', '04', '05', '07', '78', '52', '12', '50', '77', '91', '08'], 
 ['49', '49', '99', '40', '17', '81', '18', '57', '60', '87', '17', '40', '98', '43', '69', '48', '04', '56', '62', '00'], 
 ['81', '49', '31', '73', '55', '79', '14', '29', '93', '71', '40', '67', '53', '88', '30', '03', '49', '13', '36', '65'], 
 ['52', '70', '95', '23', '04', '60', '11', '42', '69', '24', '68', '56', '01', '32', '56', '71', '37', '02', '36', '91'], 
 ['22', '31', '16', '71', '51', '67', '63', '89', '41', '92', '36', '54', '22', '40', '40', '28', '66', '33', '13', '80'], 
 ['24', '47', '32', '60', '99', '03', '45', '02', '44', '75', '33', '53', '78', '36', '84', '20', '35', '17', '12', '50'], 
 ['32', '98', '81', '28', '64', '23', '67', '10', '26', '38', '40', '67', '59', '54', '70', '66', '18', '38', '64', '70'], 
 ['67', '26', '20', '68', '02', '62', '12', '20', '95', '63', '94', '39', '63', '08', '40', '91', '66', '49', '94', '21'], 
 ['24', '55', '58', '05', '66', '73', '99', '26', '97', '17', '78', '78', '96', '83', '14', '88', '34', '89', '63', '72'], 
 ['21', '36', '23', '09', '75', '00', '76', '44', '20', '45', '35', '14', '00', '61', '33', '97', '34', '31', '33', '95'], 
 ['78', '17', '53', '28', '22', '75', '31', '67', '15', '94', '03', '80', '04', '62', '16', '14', '09', '53', '56', '92'], 
 ['16', '39', '05', '42', '96', '35', '31', '47', '55', '58', '88', '24', '00', '17', '54', '24', '36', '29', '85', '57'], 
 ['86', '56', '00', '48', '35', '71', '89', '07', '05', '44', '44', '37', '44', '60', '21', '58', '51', '54', '17', '58'], 
 ['19', '80', '81', '68', '05', '94', '47', '69', '28', '73', '92', '13', '86', '52', '17', '77', '04', '89', '55', '40'], 
 ['04', '52', '08', '83', '97', '35', '99', '16', '07', '97', '57', '32', '16', '26', '26', '79', '33', '27', '98', '66'], 
 ['88', '36', '68', '87', '57', '62', '20', '72', '03', '46', '33', '67', '46', '55', '12', '32', '63', '93', '53', '69'], 
 ['04', '42', '16', '73', '38', '25', '39', '11', '24', '94', '72', '18', '08', '46', '29', '32', '40', '62', '76', '36'], 
 ['20', '69', '36', '41', '72', '30', '23', '88', '34', '62', '99', '69', '82', '67', '59', '85', '74', '04', '36', '16'], 
 ['20', '73', '35', '29', '78', '31', '90', '01', '74', '31', '49', '71', '48', '86', '81', '16', '23', '57', '05', '54'], 
 ['01', '70', '54', '71', '83', '51', '54', '69', '16', '92', '33', '48', '61', '43', '52', '01', '89', '19', '67', '48']]
'''

def horizon_mul(lst) :
    mul_list = []
    for i in range(20) :
        for j in range(17) :
            mul = 1
            for k in range(j, j + 4) :
                num = int(lst[i][k])
                mul *= num
            mul_list.append(mul)
    
    return max(mul_list)
        
horizon_mul(nested_list) # 48477312



def vertical_mul(lst) : # 다시 보기 
    mul_list = []
    for i in range(20) :
        for j in range(17) :
            mul = 1
            for k in range(j, j + 4) :
                num = int(lst[k][i])
                mul *= num
            mul_list.append(mul)

    return max(mul_list)

vertical_mul(nested_list) # 51267216



def diagonal_natural(lst) :
    mul_list = []
    for i in range(17) :
        for j in range(17) :
            first_num = int(lst[i][j])
            second_num = int(lst[i+1][j+1])
            third_num = int(lst[i+2][j+2])
            fourth_num = int(lst[i+3][j+3])
            mul = first_num * second_num * third_num * fourth_num
            mul_list.append(mul)
        
    return max(mul_list)

diagonal_natural(nested_list) # 40304286



def diagonal_reverse(lst) :
    mul_list = []
    for i in range(17) :
        for j in range(19, 2, -1) :
            first_num = int(lst[i][j])
            second_num = int(lst[i+1][j-1])
            third_num = int(lst[i+2][j-2])
            fourth_num = int(lst[i+3][j-3])
            mul = first_num * second_num * third_num * fourth_num
            mul_list.append(mul)
        
    return max(mul_list)


diagonal_reverse(nested_list) # 70600674

# Max Value = 70600674










"""
No.12 [Highly divisible triangular number]

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

"""
500 = 2^2 + 5^3
This means that I have to find the number of the form a * b * c^4 * d^4 * e^4

I can get a hint from this sentence.

c, d, and e should be 2, 3, 5 
a and b should be 7, 11 because the multiples of 2, 3, and 5 are eliminated
and the first two numbers that are not the multiple of 2, 3, 5 are 7 and 11.

The smallest number to have over five hundred divisors is 62370000.
However, the question asks what is the value of the first triangle number to have over five hundred divisors.

and 62370000 is not a triangle number.

Thus, I have to find the first triangle number that is over 6237000 and that meets all the conditions above. 
"""

def seq_tri_num(nth) :
    num_list1 = []
    if nth == 1 :
        num_list1.append(1)
    else :
        num = 0
        for i in range(1,nth + 1) :
            num += i
            num_list1.append(num)
    return max(num_list1)

# test
a = seq_tri_num(11500)
print(a) # 66130750
# -> I will put a number bigger than 11500.



def div_num(nth_num) :
    num_list2 = []
    if nth_num == 1 :
        num_list2.append(1)
    else:
        for i in range(1, nth_num + 1) :
            if nth_num % i == 0 :
                num_list2.append(i)
    return len(num_list2)
        
# test
b = div_num(15)
print(b) # 4

    
for i in range(11501, 30000) :
    tri_num = seq_tri_num(i)
    cnt = div_num(tri_num)
    if cnt >= 500 :
        break


'''
[The answer]
print(i) # 12375
print(tri_num) # 76576500
print(cnt) # 576
'''
















